import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import React, { useState } from "react";

import { useSession, signIn, signOut } from "next-auth/react";

const TodoForm = () => {
    const [todo, setTodo] = useState("");

    const { mutate } = trpc.useMutation("todos.create-todo");

    return (
        <div className="flex flex-col justify-center items-center">
            <h1 className="font-bold text-2xl my-4">Create a todo!</h1>
            <input
                type="text"
                placeholder="Title"
                value={todo}
                onChange={(e) => setTodo(e.target.value)}
                className="p-2 border border-gray-300 rounded-lg w-fit"
            />
            <button
                onClick={() => {
                    if (!todo) return;
                    mutate({ title: todo });
                    setTodo("");
                    window.location.reload();
                }}
                className="mt-4 btn"
            >
                Create!
            </button>
        </div>
    );
};

const Todo = ({
    id,
    title,
    completed,
}: {
    id: string;
    title: string;
    completed: boolean;
}) => {
    const { mutate: updateTodo } = trpc.useMutation("todos.update-todo");
    const { mutate: deleteTodo } = trpc.useMutation("todos.delete-todo");

    const handleCompletedChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        updateTodo({ id, completed: e.target.checked, title });
    };

    return (
        <div className="my-1">
            <input
                type="checkbox"
                defaultChecked={completed}
                onChange={handleCompletedChange}
            />
            <span className="ml-2">{title}</span>
            <button
                onClick={() => {
                    deleteTodo({ id });
                    window.location.reload();
                }}
                className="ml-2"
            >
                &#x274C;
            </button>
        </div>
    );
};

const TodosView = () => {
    const { data, isLoading, error } = trpc.useQuery(["todos.get-my-todos"]);

    if (data?.length === 0) {
        return <div>No Todos</div>;
    }

    return (
        <div className="flex flex-col">
            {data?.map((todo) => (
                <Todo {...todo} key={todo.id} />
            ))}
        </div>
    );
};

const Todos = () => {
    const { data: session, status } = useSession();

    if (status === "loading") {
        return <div>Loading...</div>;
    }

    if (!session) {
        return (
            <div className="w-screen max-w-full flex justify-center items-center text-center">
                <div className="font-semibold text-2xl">Please Sign In</div>
            </div>
        );
    }

    return (
        <div className="text-center">
            <h3 className="text-lg">Hello {session.user?.name}</h3>

            <h1 className="font-bold text-2xl my-4">Todos</h1>
            <TodosView />
            <TodoForm />
        </div>
    );
};

const Home: NextPage = () => {
    return (
        <>
            <Head>
                <title>Next Prisma Todolist</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <Todos />
        </>
    );
};

export default Home;
